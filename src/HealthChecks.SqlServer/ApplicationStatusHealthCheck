using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Diagnostics.HealthChecks;
using Microsoft.Extensions.Hosting;

namespace HealthChecks.ApplicationStatus
{
    /// <summary>
    /// Healthcheck that detects application graceful shutdown.
    /// </summary>
    public class ApplicationStatusHealthCheck : IHealthCheck, IDisposable
    {
        private readonly IHostApplicationLifetime _lifetime;
        private CancellationTokenRegistration _ctRegistration;
        private bool _disposed;

        public ApplicationStatusHealthCheck(IHostApplicationLifetime lifetime)
        {
            _lifetime = lifetime ?? throw new ArgumentNullException(nameof(lifetime));
            _ctRegistration = _lifetime.ApplicationStopping.Register(OnStopping);
        }

        /// <summary>
        /// Handler that will be triggered on application stopping event.
        /// </summary>
        private void OnStopping()
        {
            Dispose();
        }

        /// <inheritdoc />
        public Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)
        {
            cancellationToken.ThrowIfCancellationRequested();

            var result = _ctRegistration.Token.CanBeCanceled ? HealthCheckResult.Healthy() : HealthCheckResult.Unhealthy();
            return Task.FromResult(result);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (_disposed)
                return;

            if (disposing)
            {
                _ctRegistration.Dispose();
            }

            _disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
    }
}
