namespace HealthChecks.AzureServiceBus
{
    public class AzureEventHubHealthCheck : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public AzureEventHubHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureEventHubOptions options) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public abstract class AzureServiceBusHealthCheck
    {
        protected static readonly System.Collections.Concurrent.ConcurrentDictionary<string, Azure.Messaging.ServiceBus.ServiceBusClient> ClientConnections;
        protected static readonly System.Collections.Concurrent.ConcurrentDictionary<string, Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient> ManagementClientConnections;
        protected static readonly System.Collections.Concurrent.ConcurrentDictionary<string, Azure.Messaging.ServiceBus.ServiceBusReceiver> ServiceBusReceivers;
        public AzureServiceBusHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureServiceBusOptions options) { }
        protected abstract string ConnectionKey { get; }
        protected string Prefix { get; }
        protected Azure.Messaging.ServiceBus.ServiceBusClient CreateClient() { }
        protected Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient CreateManagementClient() { }
    }
    public class AzureServiceBusQueueHealthCheck : HealthChecks.AzureServiceBus.AzureServiceBusHealthCheck, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public AzureServiceBusQueueHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueOptions options) { }
        protected override string ConnectionKey { get; }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class AzureServiceBusSubscriptionHealthCheck : HealthChecks.AzureServiceBus.AzureServiceBusHealthCheck, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public AzureServiceBusSubscriptionHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureServiceBusSubscriptionOptions options) { }
        protected override string ConnectionKey { get; }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class AzureServiceBusTopicHealthCheck : HealthChecks.AzureServiceBus.AzureServiceBusHealthCheck, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public AzureServiceBusTopicHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureServiceBusTopicOptions options) { }
        protected override string ConnectionKey { get; }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
}
namespace HealthChecks.AzureServiceBus.Configuration
{
    public class AzureEventHubOptions
    {
        public AzureEventHubOptions() { }
        public Azure.Messaging.EventHubs.EventHubConnection? Connection { get; set; }
        public string? ConnectionString { get; set; }
        public Azure.Core.TokenCredential? Credential { get; set; }
        public string? Endpoint { get; set; }
        public string? EventHubName { get; set; }
    }
    public class AzureServiceBusOptions
    {
        public AzureServiceBusOptions() { }
        public string? ConnectionString { get; set; }
        public Azure.Core.TokenCredential? Credential { get; set; }
        public string? Endpoint { get; set; }
    }
    public class AzureServiceBusQueueOptions : HealthChecks.AzureServiceBus.Configuration.AzureServiceBusOptions
    {
        public AzureServiceBusQueueOptions(string queueName) { }
        public string QueueName { get; set; }
        public bool UsePeekMode { get; set; }
    }
    public class AzureServiceBusSubscriptionOptions : HealthChecks.AzureServiceBus.Configuration.AzureServiceBusTopicOptions
    {
        public AzureServiceBusSubscriptionOptions(string topicName, string subscriptionName) { }
        public string SubscriptionName { get; set; }
        public bool UsePeekMode { get; set; }
    }
    public class AzureServiceBusTopicOptions : HealthChecks.AzureServiceBus.Configuration.AzureServiceBusOptions
    {
        public AzureServiceBusTopicOptions(string topicName) { }
        public string TopicName { get; set; }
    }
}
namespace Microsoft.Extensions.DependencyInjection
{
    public static class AzureServiceBusHealthCheckBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureEventHub(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, Azure.Messaging.EventHubs.EventHubConnection> eventHubConnectionFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureEventHubOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureEventHub(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> connectionStringFactory, System.Func<System.IServiceProvider, string> eventHubNameFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureEventHubOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureEventHub(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string connectionString, string eventHubName, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureEventHubOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureEventHub(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> endpointFactory, System.Func<System.IServiceProvider, string> eventHubNameFactory, System.Func<System.IServiceProvider, Azure.Core.TokenCredential> tokenCredentialFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureEventHubOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureEventHub(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string endpoint, string eventHubName, Azure.Core.TokenCredential tokenCredential, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureEventHubOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusQueue(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> connectionStringFactory, System.Func<System.IServiceProvider, string> queueNameFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusQueue(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string connectionString, string queueName, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusQueue(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> endpointFactory, System.Func<System.IServiceProvider, string> queueNameFactory, System.Func<System.IServiceProvider, Azure.Core.TokenCredential> tokenCredentialFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusQueue(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string endpoint, string queueName, Azure.Core.TokenCredential tokenCredential, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusSubscription(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> connectionStringFactory, System.Func<System.IServiceProvider, string> topicNameFactory, System.Func<System.IServiceProvider, string> subscriptionNameFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusSubscriptionOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusSubscription(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string connectionString, string topicName, string subscriptionName, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusSubscriptionOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusSubscription(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> endpointFactory, System.Func<System.IServiceProvider, string> topicNameFactory, System.Func<System.IServiceProvider, string> subscriptionNameFactory, System.Func<System.IServiceProvider, Azure.Core.TokenCredential> tokenCredentialFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusSubscriptionOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusSubscription(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string endpoint, string topicName, string subscriptionName, Azure.Core.TokenCredential tokenCredential, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusSubscriptionOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusTopic(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> connectionStringFactory, System.Func<System.IServiceProvider, string> topicNameFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusTopicOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusTopic(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string connectionString, string topicName, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusTopicOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusTopic(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string endpoint, string topicName, Azure.Core.TokenCredential tokenCredential, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusTopic(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> endpointFactory, System.Func<System.IServiceProvider, string> topicNameFactory, System.Func<System.IServiceProvider, Azure.Core.TokenCredential> tokenCredentialFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusTopicOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
    }
}